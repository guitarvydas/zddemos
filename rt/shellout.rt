⌈ this needs to be rewritten to use the low_level “shell_out“ component, this can be done solely as a diagram without using python code here⌉
defn shell_out_instantiate (reg, owner, name, template_data) {
    name_with_id ≡ gensymbol (“shell_out”)
    cmd ≡ #split_string_for_shell (template_data)
    return make_leaf (name_with_id, owner, cmd, ↪︎shell_out_handler)
}

defn shell_out_handler (eh, msg) {
    cmd ≡ eh.instance_data
    s ≡ msg.datum.v
    deftemp ret ⇐ ϕ
    deftemp rc ⇐ ϕ
    deftemp stdout ⇐ ϕ
    deftemp stderr ⇐ ϕ
    #run_command (cmd, s, ret, rc, stdout, stderr)
    if rc = 0 {
        send_string (eh, “”, #strcons (stdout, stderr) , msg)
    } else {
        send_string (eh, “✗”, #strcons (stdout, stderr), msg)
    }
}

defn generate_shell_components (reg, container_list) {
    ⌈ [⌉
    ⌈     {'file': 'simple0d.drawio', 'name': 'main', 'children': [{'name': 'Echo', 'id': 5}], 'connections': [...]},⌉
    ⌈     {'file': 'simple0d.drawio', 'name': '...', 'children': [], 'connections': []}⌉
    ⌈ ]⌉
    if ϕ != container_list {
        for diagram in container_list {
            ⌈ loop through every component in the diagram and look for names that start with “$“ or “'“ ⌉
            ⌈ {'file': 'simple0d.drawio', 'name': 'main', 'children': [{'name': 'Echo', 'id': 5}], 'connections': [...]},⌉
            for child_descriptor in diagram@“children” {
                if first_char_is (child_descriptor@“name”, “$”) {
                    name ≡ child_descriptor@“name”
                    cmd ≡ #stringcdr (name).strip ()
                    generated_leaf ≡ mkTemplate (name,  cmd, ↪︎shell_out_instantiate)
                    register_component (reg, generated_leaf)
                } elif first_char_is (child_descriptor@“name”, “'”) {
                    name ≡ child_descriptor@“name”
                    s ≡ #stringcdr (name)
                    generated_leaf ≡ mkTemplate (name,  s, ↪︎string_constant_instantiate)
                    register_component_allow_overwriting (reg, generated_leaf)
		}
	    }
	}
    }
    return reg
}

defn first_char (s) {
    return #stringcar (s)
}

defn first_char_is (s, c) {
    return c = first_char (s)
}


⌈ TODO: #run_command needs to be rewritten to use the low_level “shell_out“ component, this can be done solely as a diagram without using python code here⌉
⌈ I'll keep it for now, during bootstrapping, since it mimics what is done in the Odin prototype _ both need to be revamped⌉

